# Ultralytics YOLO üöÄ, AGPL-3.0 license
# Ultralics website domain checks

name: Check Domains

on:
  schedule:
    # Runs every day at 05:00 UTC
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        domain: ["ultralytics.com", "ultralitics.com", "ultralytics.ai", "ultralytics.app", "ultralytics.eu", "ultralytics.es", "ultralytics.io", "ultralytics.net", "ultralytics.org", "yolov5.com", "pjreddie.org", "pjreddie.net"]
        prefix: ["www.", ""]
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    - name: Check domain redirections
      shell: python
      run: |
        import requests
        
        def check_domain_redirection(domain, prefix, max_attempts=3):
            """
            Check if the given domain redirects to ultralytics.com correctly, with up to 3 retries.
            """
            url = f"https://{prefix}{domain}"
            print(f"\nChecking {url}")
            for attempt in range(max_attempts):
                try:
                    response = requests.get(url, allow_redirects=True)
                    response.raise_for_status()
                    final_url = response.url
                    if "ultralytics.com" in final_url and response.status_code == 200:
                        print("Success ‚úÖ")
                        return True
                except requests.RequestException as e:
                    print(f"Error: {e}")
                    if attempt == max_attempts - 1:
                        print(f"Failed after {max_attempts} attempts ‚ùå.")
                        return False
            return False

        success = check_domain_redirection('${{ matrix.domain }}', '${{ matrix.prefix }}')
        if not success:
            raise Exception(f"Domain check failed for ${{ matrix.domain }} with prefix '${{ matrix.prefix }}'")

# Ultralytics YOLO üöÄ, AGPL-3.0 license
# Continuous Integration (CI) GitHub Actions tests broken link checker using https://github.com/lycheeverse/lychee
# Ignores the following status codes to reduce false positives:
#   - 401(Vimeo, 'unauthorized')
#   - 403(OpenVINO, 'forbidden')
#   - 429(Instagram, 'too many requests')
#   - 500(Zenodo, 'cached')
#   - 502(Zenodo, 'bad gateway')
#   - 999(LinkedIn, 'unknown status code')

name: Check Broken links

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # runs at 00:00 UTC every day
  pull_request:
    branches:
      - main

jobs:
  Links:
    runs-on: ubuntu-latest
    steps:

      - name: Download and install lychee
        run: |
          LYCHEE_URL=$(curl -s https://api.github.com/repos/lycheeverse/lychee/releases/latest | grep "browser_download_url" | grep "x86_64-unknown-linux-gnu.tar.gz" | cut -d '"' -f 4)
          curl -L $LYCHEE_URL -o lychee.tar.gz
          tar xzf lychee.tar.gz
          sudo mv lychee /usr/local/bin

      - name: Download Ultralytics Website
        run: |
          # Download sitemap.xml
          wget -O sitemap.xml https://www.ultralytics.com/sitemap.xml
          
          # Parse URLs using a combination of tr, sed, and grep
          tr '\n' ' ' < sitemap.xml | \
            sed 's/<loc>/\n<loc>/g' | \
            grep -oP '(?<=<loc>).*?(?=</loc>)' | \
            sed 's/^[[:space:]]*//;s/[[:space:]]*$//' > urls.txt
          
          # Count total URLs to be downloaded
          total_urls=$(wc -l < urls.txt)
          echo "Total URLs to be downloaded: $total_urls"
          
          # Download all URLs
          wget \
            --adjust-extension \
            --reject "*.jpg*,*.jpeg*,*.png*,*.gif*,*.webp*,*.svg*,*.txt" \
            --input-file=urls.txt \
            --no-clobber \
            --no-parent \
            --wait=0.001 \
            --random-wait \
            --tries=3 \
            --no-verbose \
            --force-directories
          
          # Count successfully downloaded files
          downloaded_files=$(find https://www.ultralytics.com -type f | wc -l)
          echo "Total pages downloaded: $downloaded_files"

          rm -rf www.ultralytics.com/glossary

      - name: Run Broken Link Checks on Ultralytics Website
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          retry_wait_seconds: 1
          max_attempts: 1
          command: |
            rm -rf .lycheecache
            lychee \
            --scheme 'https' \
            --timeout 60 \
            --insecure \
            --accept 401,403,429,500,502,999 \
            --exclude-all-private \
            --exclude 'https?://(www\.)?(linkedin\.com|twitter\.com|instagram\.com|kaggle\.com|tiktok\.com|fonts\.gstatic\.com|fonts\.googleapis\.com|url\.com|tesla\.com|wellfound\.com|.*\.cloudfunctions\.net|0\.0\.0\.0:5543/predict/from_files)' \
            --exclude-path '**/ci.yaml' \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --header "User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.183 Safari/537.36" \
            './www.ultralytics.com/**/*.html' | tee lychee_output.txt
            
            # Add the lychee output to GitHub step summary
            cat lychee_output.txt >> $GITHUB_STEP_SUMMARY
            
            # Escape newlines, remove [], remove .html, and escape special characters for GitHub Actions environment file
            ESCAPED_SUMMARY=$(awk '{printf "%s\\n", $0}' lychee_output.txt | sed 's/\[//g; s/\]//g; s/\.html//g; s/"/\\"/g')
            echo "SUMMARY<<EOF" >> $GITHUB_ENV
            echo "$ESCAPED_SUMMARY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

      - name: Check for failure and notify
        if: always() # This ensures the job runs even if previous jobs fail
        # {"text": "<!channel> GitHub Actions error for
        # if: needs.Links.result == 'failure' && github.repository == 'ultralytics/docs' && (github.event_name == 'schedule' || github.event_name == 'push')
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {"text": "GitHub Actions error for ${{ github.workflow }} ‚ùå\n\n\n*Repository:* https://github.com/${{ github.repository }}\n*Action:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Author:* ${{ github.actor }}\n*Event:* ${{ github.event_name }}\n\n\n${{ env.SUMMARY }}\n"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_WEBSITE }}
